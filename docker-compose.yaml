version: "3.7"

services:
  ###
  ### COMMON CONTAINERS
  ###
  # Watchtower keeps all other containers current
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # Checks for new container images every day at 6AM (cron format)
    command: --schedule "0 0 6 * * *"
  
  ##
  ## SERVO CONTAINERS
  ##
  # Traefik for container reverse SSL proxy.
  # - All containers with a web front-end should be exposed through Traefik.
  # - Containers running on the same host as the Traefik container itself should
  #   be on the 'reverse_proxy' network.
  # - Containers on different hosts should be manually defined under the
  #   Traefik "rules" directory.
  traefik:
    container_name: traefik
    image: traefik
    restart: always
    domainname: ${DOMAINNAME}
    profiles:
      - servo
    ports:
      - 80:80
      - 443:443
    networks:
      - reverse_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APPDATA}/traefik:/etc/traefik
    secrets:
      - cloudflare_dns_api_token
    environment:
      # This variable must end in _FILE for the token to be read from a file.
      CLOUDFLARE_DNS_API_TOKEN_FILE: /run/secrets/cloudflare_dns_api_token
    labels:
      # Let traefik handle this container.
      # Must be specified for a container to be exposed.
      traefik.enable: true
      
      # Traefik dashboard settings.
      # Note that the api@internal service is traefik-specific.
      traefik.http.routers.traefik.rule: Host(`traefik.${DOMAINNAME}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls.certresolver: letsencrypt
      traefik.http.routers.traefik.entrypoints: websecure

      # Password auth (optional) - uses htpasswd user/pass 
      #- "traefik.http.routers.traefik.middlewares=authtraefik"
      #- "traefik.http.middlewares.authtraefik.basicauth.users=user:xxx"

      # Global redirect all incoming http to https
      traefik.http.routers.http-catchall.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: redirect-to-https

      # Middleware for https redirect
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https

  # Homelab dashboard
  # Dashy is simplistic, but contains a declarative configuration file that is
  # easily modified and replicated.
  dashy:
    image: lissy93/dashy
    container_name: dashy
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/dashy:/app/public
      - ${APPDATA}/shared/dashboard-icons/png:/app/public/item-icons/icons
    environment:
      - NODE_ENV=production
      - UID=${PUID}
      - GID=${PGID}
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      traefik.enable: true
      traefik.http.routers.dashy.rule: Host(`dashy.${DOMAINNAME}`)
      traefik.http.routers.dashy.entrypoints: websecure
      traefik.http.routers.dashy.tls: true
      traefik.http.routers.dashy.tls.certresolver: letsencrypt
      traefik.http.services.dashy.loadbalancer.server.port: 80
  
  # Web management for containers 
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APPDATA}/portainer/data:/data
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.portainer.rule: Host(`portainer.${DOMAINNAME}`)
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.tls: true
      traefik.http.routers.portainer.tls.certresolver: letsencrypt
      traefik.http.services.portainer.loadbalancer.server.port: 9000

  # Duplicati for cloud backups of important data.
  duplicati:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    # First run:  Uncomment the ports definition below, SSH into into docker host with:
    # ssh user@host -L 8200:localhost:8200, log into web UI on http://localhost:8200
    # Modify Hostnames field to allow the duplicati container hostname (duplicati.${DOMAINNAME})
    # Save, stop container, comment the ports section below, restart.
    #ports:
    #  - 8200:8200
    volumes:
      - ${APPDATA}/duplicati:/config
      - /mnt/fast/home:/source/home # directory to back up.
      - /mnt/fast/appdata:/source/appdata # another directory to back up.
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.duplicati.rule: Host(`duplicati.${DOMAINNAME}`)
      traefik.http.routers.duplicati.entrypoints: websecure
      traefik.http.routers.duplicati.tls: true
      traefik.http.routers.duplicati.tls.certresolver: letsencrypt
      traefik.http.services.duplicati.loadbalancer.server.port: 8200
  
  # Emby for media streaming
  emby:
    container_name: emby
    image: lscr.io/linuxserver/emby
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/emby:/config
      - /mnt/tank/media/tv:/mnt/tv
      - /mnt/tank/media/movies:/mnt/movies
      - /mnt/tank/media/other:/mnt/other
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.emby.rule: Host(`emby.${DOMAINNAME}`)
      traefik.http.routers.emby.entrypoints: websecure
      traefik.http.routers.emby.tls: true
      traefik.http.routers.emby.tls.certresolver: letsencrypt
      traefik.http.services.emby.loadbalancer.server.port: 8096

  # Sabnzbd for snatching usenet NZBs
  sabnzbd:
    container_name: sabnzbd
    image: lscr.io/linuxserver/sabnzbd
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/sabnzbd:/config
      - /mnt/fast/downloads:/downloads
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.sabnzbd.rule: Host(`sabnzbd.${DOMAINNAME}`)
      traefik.http.routers.sabnzbd.entrypoints: websecure
      traefik.http.routers.sabnzbd.tls: true
      traefik.http.routers.sabnzbd.tls.certresolver: letsencrypt
      traefik.http.services.sabnzbd.loadbalancer.server.port: 8080
   
  # Media management for TV shows
  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    # Monitors the same directory as sabnzbd for completed downloads,
    # moves them to same directory for Plex/Emby TV library.
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APPDATA}/sonarr:/config
      - /mnt/tank/media/tv:/tv
      - /mnt/fast/downloads:/downloads
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.rule: Host(`sonarr.${DOMAINNAME}`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: letsencrypt
      traefik.http.services.sonarr.loadbalancer.server.port: 8989

  # Media management for movies
  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/radarr:/config
      - /mnt/tank/media/movies:/movies
      - /mnt/fast/downloads:/downloads
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.rule: Host(`radarr.${DOMAINNAME}`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certresolver: letsencrypt
      traefik.http.services.radarr.loadbalancer.server.port: 7878

  # Media tracker management
  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - ${APPDATA}/prowlarr:/config
    ports:
      - 9696:9696
    labels:
      traefik.enable: true
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${DOMAINNAME}`)
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certresolver: letsencrypt
      traefik.http.services.prowlarr.loadbalancer.server.port: 8989
  
  # qbittorrent for torrents
  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/qbittorrent:/config
      - /mnt/fast/downloads:/downloads
    environment:
      - TZ
      - PUID
      - PGID
      - UMASK_SET=022
      - WEBUI_PORT=8080
    ports:
      - 51444:51444
      - 51444:51444/udp
    labels:
      traefik.enable: true
      traefik.http.routers.qbittorrent.rule: Host(`qbittorrent.${DOMAINNAME}`)
      traefik.http.routers.qbittorrent.entrypoints: websecure
      traefik.http.routers.qbittorrent.tls: true
      traefik.http.routers.qbittorrent.tls.certresolver: letsencrypt
      traefik.http.services.qbittorrent.loadbalancer.server.port: 8080

  ombi:
    container_name: ombi
    image: lscr.io/linuxserver/ombi:latest
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/ombi:/config
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      traefik.enable: true
      traefik.http.routers.ombi.rule: Host(`ombi.${DOMAINNAME}`)
      traefik.http.routers.ombi.entrypoints: websecure
      traefik.http.routers.ombi.tls: true
      traefik.http.routers.ombi.tls.certresolver: letsencrypt
      traefik.http.services.ombi.loadbalancer.server.port: 3579   
  
  ##
  ## HOMEBOT CONTAINERS
  ##
  # Portainer agent for remote container management.
  portainer-agent:
    container_name: portainer-agent
    image: portainer/agent:latest
    restart: always
    profiles:
      - homebot
    networks:
      - homebot
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    
  # MQTT broker
  # Note this does not need to be exposed as long as the homebridge container
  # can operate appropriately with Avahi (to avoid network_mode: host).
  mqtt:
    container_name: mosquitto
    hostname: mosquitto
    image: eclipse-mosquitto
    restart: always
    profiles:
      - homebot
    networks:
      - homebot
    volumes:
      - ${APPDATA}/mosquitto:/mosquitto/config:ro

  # Zigbee device management
  z2m:
    container_name: zigbee2mqtt
    hostname: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    restart: always
    depends_on:
      - mqtt
    profiles:
      - homebot
    networks:
      - homebot
    ports:
      - 8080:8080
    volumes:
      - /run/udev:/run/udev:ro
      - ${APPDATA}/zigbee2mqtt:/app/data
      - zigbee2mqtt_log:/app/data/log # keep log data out of config dir.
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0 # match to USB device of Zigbee adapter.
    #privileged: true # If used, comment out group_add and user sections.
    group_add:
      # Match to group of Zigbee USB adapter; required to run non-root.
      - dialout
    user: ${PUID}:${PGID} # run as non-root user.

  # Homekit integration for non-supported devices
  homebridge:
    container_name: homebridge
    hostname: homebridge
    image: homebridge/homebridge
    restart: always
    profiles:
      - homebot
    networks:
      - homebot
    # network_mode: host  # use if docker bridge + avahi has issues      
    ports:
      - 53936:53936/tcp # match bridge port from config.json
      - 8581:8581 # web UI
    volumes:
      - ${APPDATA}/homebridge:/homebridge
    logging:
      driver: json-file
      options:
        max-size: 10mb
        max-file: 1
    labels:
      # Do not update this container via watchtower
      com.centurylinklabs.watchtower.enable: false

networks:
  # Default docker bridge network
  default:
    driver_opts:
      # Set interface name on host to something meaningful
      com.docker.network.bridge.name: docker_default

  # Network for containers with exposed services (proxied through Traefik)
  reverse_proxy:
    driver_opts:
      com.docker.network.bridge.name: traefik-backend
  
  # Network for homebot services
  homebot:
    driver_opts:
      com.docker.network.bridge.name: homebot

volumes:
  zigbee2mqtt_log:
    driver: local
  homebridge_data:
    driver: local

secrets:
  # Obfuscates sensitive information from the docker-compose file.
  cloudflare_dns_api_token:
    file: "./secrets/cloudflare_dns_api_token"
