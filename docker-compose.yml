version: "3.7"

services:
  ###
  ### COMMON CONTAINERS
  ###
  # Watchtower keeps all other containers current
  watchtower:
    container_name: watchtower
    restart: always
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # Checks for new container images every day at 6AM (cron format)
    command: --schedule "0 0 6 * * *"

  # Traefik for container reverse SSL proxy.
  # All containers with an exposed web front-end are proxied through this
  # container.  They need to be on the reverse_proxy network, with
  # appropriate labels to enable them.
  traefik:
    container_name: traefik
    image: traefik
    restart: unless-stopped
    domainname: ${DOMAINNAME}
    profiles:
      - servo
      - homebot
    ports:
      - 80:80
      - 443:443
    networks:
      - reverse_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APPDATA}/traefik:/etc/traefik
    secrets:
      - cloudflare_dns_api_token
    environment:
      # This variable must end in _FILE for the token to be read from a file.
      CLOUDFLARE_DNS_API_TOKEN_FILE: /run/secrets/cloudflare_dns_api_token
    labels:
      # Let traefik handle this container.
      # Must be specified for a container to be exposed.
      - traefik.enable=true
      
      # Traefik dashboard settings.
      # Note that the api@internal service is traefik-specific.
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik.entrypoints=websecure

      # Password auth (optional) - uses htpasswd user/pass 
      #- "traefik.http.routers.traefik.middlewares=authtraefik"
      #- "traefik.http.middlewares.authtraefik.basicauth.users=user:xxx"

      # Global redirect all incoming http to https
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https

      # Middleware for https redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
  
  ##
  ## SERVO CONTAINERS
  ##
  # Web management for containers 
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - reverse_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APPDATA}/portainer/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAINNAME}`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=letsencrypt
      - traefik.http.services.portainer.loadbalancer.server.port=9000

  # Duplicati for cloud backups of important data.
  duplicati:
    container_name: duplicati
    image: linuxserver/duplicati
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    # First run:  Uncomment the ports definition below, SSH into into docker host with:
    # ssh user@host -L 8200:localhost:8200, log into web UI on http://localhost:8200
    # Modify Hostnames field to allow the duplicati container hostname (duplicati.${DOMAINNAME})
    # Save, stop container, comment the ports section below, restart.
    #ports:
    #  - 8200:8200
    volumes:
      - ${APPDATA}/duplicati:/config
      - /mnt/fast/home:/source
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      - traefik.enable=true
      - traefik.http.routers.duplicati.rule=Host(`duplicati.${DOMAINNAME}`)
      - traefik.http.routers.duplicati.entrypoints=websecure
      - traefik.http.routers.duplicati.tls=true
      - traefik.http.routers.duplicati.tls.certresolver=letsencrypt
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
  
  # Emby for media streaming
  emby:
    container_name: emby
    image: emby/embyserver
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/emby:/config
      - /mnt/tank/media/tv:/mnt/tv
      - /mnt/tank/media/movies:/mnt/movies
    environment:
      - UID=${PUID}
      - GID=${PGID}
    labels:
      - traefik.enable=true
      - traefik.http.routers.emby.rule=Host(`emby.${DOMAINNAME}`)
      - traefik.http.routers.emby.entrypoints=websecure
      - traefik.http.routers.emby.tls=true
      - traefik.http.routers.emby.tls.certresolver=letsencrypt
      - traefik.http.services.emby.loadbalancer.server.port=8096

  # Sabnzbd for snatching usenet NZBs
  sabnzbd:
    container_name: sabnzbd
    image: linuxserver/sabnzbd
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/sabnzbd:/config
      - /mnt/tank/media/downloads/complete:/downloads/complete
      - /mnt/tank/media/downloads/incomplete:/downloads/incomplete
    environment:
      - TZ
      - PUID
      - PGID
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAINNAME}`)
      - traefik.http.routers.sabnzbd.entrypoints=websecure
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.tls.certresolver=letsencrypt
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
   
  # Sonarr for TV series management
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    # Monitors the same directory as sabnzbd for completed downloads,
    # moves them to same directory for Plex/Emby TV library.
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APPDATA}/sonarr:/config
      - /mnt/tank/media/downloads:/downloads
      - /mnt/tank/media/tv:/tv
    environment:
      - TZ
      - PUID
      - PGID
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAINNAME}`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=letsencrypt
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
  
  # qbittorrent for torrents
  qbittorrent:
    container_name: qbittorrent
    image: linuxserver/qbittorrent
    restart: unless-stopped
    profiles:
      - servo
    networks:
      - reverse_proxy
    volumes:
      - ${APPDATA}/qbittorrent:/config
      - ${APPDATA}/shared/torrents:/downloads
      - /mnt/tank/media/movies:/downloads/movies
      - /mnt/tank/media/tv:/downloads/tv
    environment:
      - TZ
      - PUID
      - PGID
      - UMASK_SET=022
      - WEBUI_PORT=8080
    ports:
      - 51444:51444
      - 51444:51444/udp
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAINNAME}`)
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=letsencrypt
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
  
  ##
  ## HOMEBOT CONTAINERS
  ##
  # MQTT broker
  # Note this does not need to be exposed as long as the homebridge container
  # can operate appropriately with Avahi (to avoid network_mode: host).
  mqtt:
    container_name: mosquitto
    hostname: mosquitto
    image: eclipse-mosquitto
    restart: always
    profiles:
      - homebot
    networks:
      - homebot
    volumes:
      - ${APPDATA}/mosquitto:/mosquitto/config:ro

  # Zigbee device management
  z2m:
    container_name: zigbee2mqtt
    hostname: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    restart: always
    depends_on:
      - mqtt
    profiles:
      - homebot
    networks:
      - homebot
    #ports:
    #  - 8080:8080 # can be moved behind traefik
    volumes:
      - /run/udev:/run/udev:ro
      - ${APPDATA}/zigbee2mqtt:/app/data
      - zigbee2mqtt_log:/app/data/log # keep log data out of config dir.
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0 # match to USB device of Zigbee adapter.
    #privileged: true # If used, comment out group_add and user sections.
    group_add:
      # Match to group of Zigbee USB adapter; required to run non-root.
      - dialout
    user: ${PUID}:${PGID} # run as non-root user.
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`z2m.${DOMAINNAME}`)
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=letsencrypt
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080

  # Homekit integration for non-supported devices
  homebridge:
    container_name: homebridge
    hostname: homebridge
    image: homebridge/homebridge
    restart: always
    profiles:
      - homebot
    networks:
      - homebot
    # network_mode: host  # use if docker bridge + avahi has issues      
    ports:
      - 53936:53936/tcp # match bridge port from config.json
      #- 8581:8581 # web UI, can be moved behind traefik
    volumes:
      - ${APPDATA}/homebridge/config.json:/homebridge/config.json
      - homebridge_data:/homebridge
    logging:
      driver: json-file
      options:
        max-size: 10mb
        max-file: 1
    labels:
      # Do not update this container via watchtower
      - com.centurylinklabs.watchtower.enable=false

      # Traefik labels
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`homebridge.${DOMAINNAME}`)
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=letsencrypt
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8581

networks:
  # Default docker bridge network
  default:
    driver_opts:
      # Set interface name on host to something meaningful
      com.docker.network.bridge.name: docker_default

  # Network for containers with exposed services (proxied through Traefik)
  reverse_proxy:
    driver_opts:
      com.docker.network.bridge.name: traefik-backend
  
  # Network for homebot services
  homebot:
    driver_opts:
      com.docker.network.bridge.name: homebot

volumes:
  zigbee2mqtt_log:
  homebridge_data:

secrets:
# Obfuscates sensitive information from the docker-compose file.
  cloudflare_dns_api_token:
    file: "./secrets/cloudflare_dns_api_token"
